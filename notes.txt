# Ways to fetch data in react

1. Use the stale-while-revalidate(SWR) method:
-> used to fetch data from a server
-> manages any issues that may arise when obtaining the data and helps you manage its storage
-> SWR includes useState() and useEffect() 
-> speeds up app's loading time by displaying the older data while fetching the latest information
-> To use 'SWR' to get data do:
    1. create a file in your application called swr.jsx
    2. install the package SWR into your application with the following command:
        npm i swr
    3. import useSWR, which is a hook that has both useState() and useEffect() 
    4. define a constant variable on top called fetcher and assign it a function which looks like:
        const fetcher = (...args) => fetch(...args).then(res => res.json())

-> example of how the swr.jsx should look
    // import useSWR from the swr package
    import useSWR from 'swr';

    // create a function to handle API request
    const fetcher = (...args) => fetch(...args).then((res) => res.json());

    const SWR = () => {
        const{
            data: countries,
            error,
            isValidating,
        }   = useSWR('https://restcountries.com/v2/all', fetcher);

        // handles error and loading state
        if (error) return <div className='failed'>failed to load </div>;
        if (isValidating) return <div className='Loading'>Loading...</div>

        return(
            <div>
                {countries && countries.map((country, index) => (
                    <img key={index} src={country.flags.png} alt='flag' width={100} />
                ))}
            </div>
        )
    }

    export default SWR;

2. Use the javascript 'Fetch()' method
-> simplest and most used approach
-> well known for retrieving the data from the APIs
-> lets you send extra details to the server, like who you are and what kind of data you want
-> To use 'fetch()' method to get data do:
    1. in your application create a file
    2. import useState() for state management in react
    3. import useEffect(), as it will make the data from the API render
-> example fetch.jsx
    import { useState, useEffect } from "react";

    const Fetch = () => {
        const [photos, setPhotos] = useState([]);

        useEffect(() => {
            // Fetch data from the API when the component mounts
            fetch('https://jsonplaceholder.typicode.com/photos')
            .then((res) => {
                return res.json();  // Parse the JSON response
            })
            .then((data) => {
                console.log(data);  // Log the fetched data to console
                setPhotos(data);    // Update the state with fetched photos
            });
        }, []);  // Empty dependency array means this effect runs only once after the initial render

        return (
            <div>
                {/* Map through the photos state array and render each photo as an image */}
                {photos.map((photo) => (
                    <img key={photo.id} src={photo.url} alt={photo.title} width={100} />
                ))}
            </div>
        );
    }

    export default Fetch;

3. use the React Query library
-> useful for managing data in react
-> makes handling data in your app feel almost automatic
-> simplifies and manages loading states and errors, no need of separate useState() hook
-> how to use?
    1. install the react-query library  
        npm i @tanstack/react-query
    2. use the QueryClientProvider from @tanstack/react-query to make things work
    3. wrap the application, which is the Main.jsx component, with it and pass queryClient as a prop
    * Main.jsx file should look like
        import { QueryClient, QueryClientProvider} from '@tanstack/react-query';

        const queryClient = new QueryClient();

        ReactDOM.createRoot(document.getElementById('root')).render(
        <React.StrictMode>
            <QueryClientProvider client={queryClient}>
            <App />
            </QueryClientProvider>
        </React.StrictMode>
        )

    4. fetch the data by doing the following
        - create a file in your application
        - import the hook from '@tanstack/react-query' at the top of your file
            useQuery hook is defined with two crucial parameters in object form, queryFn and queryKey
                queryFn handles data from the endpoint
                queryKey serves as the unique identifier for the data obtained

-> example
    import { useQuery } from '@tanstack/react-query'

    const Query = () => {
        const {data: comments, isLoading, error} = useQuery({
            queryFn: () => 
                fetch('https://jsonplaceholder.typicode.com/comments?_limit=10').then(
                    (res) => res.json()
                ),
            queryKey: ['comments'],
        });
        // show a loading message while the data is fetching
        if(isLoading){
            return <h2>Loading...</h2>
        }
        // to handle error
        if(error){
            return <div className='error'>Error: error fetching</div>
        }
        return (
            <div>
                <h1 className='title'>Email address of user</h1>
                {comments.map((comment) => (
                    <h2 key={comment.id} className='users'>
                        {comment.id}.{comment.email}
                    </h2>
                ))}
            </div>
        )
    }

    export default Query;

4. use the Axios library
-> library package that we can add to our program to retrieve information from an API.
-> Axios is used in both web browsers and server-side javascript
-> how to use axios library?
    1. create a file in your application
    2. install the package Axios into your application like:
        npm install axios
    3. import 'Axios' library into your application
    4. import 'useState()' which enables state management in react
    5. import 'useEffect()' which facilitates the rendering of data from the API
-> example 'Axios.jsx'
    import { useState, useEffect } from "react";
    import axios from 'axios'

    const Axios = () => {
        const [meals, setMeals] = useState([])
        useEffect(() => {
            axios.get('https://www.themealdb.com/api/json/v1/1/random.php')
            .then((res) => {
                setMeals(res.data.meals);
            })
        },[])
        return (
            <div>
                {meals.map((meal) => (
                    <img src={meal.strMealThumb} key={meal.idMeal} alt={meal.strMeal} width={400} />
                ))}
            </div>
        )
    }

    export default Axios;

5. use the 'useFetch' custom hook from react-fetch-hook
-> custom hook in react is a javascript function. it is reusable and leverages React's built-in hooks
    the purpose is to encapsulate and share logic across multiple components which promotes code modularity and maintainability
-> custom hook allows us to reuse the fetching logic in various components of our app
-> custom hooks allow you to test code independently ensuring they work as expected before using them in components
-> how to get data using a custom hook
    1. install the required package as:
        npm install react-fetch-hook
    2. navigate to the start of your application's file and add the following line to import the useFetch hook
        import useFetch from 'react-fetch-hook';
    3. create variables to keep track of errors, loading states and data by using destructuring
    4. in your application make API calls using the 'useFetch hook'. update the variables
-> example 'custom.jsx'
    import useFetch from 'react-fetch-hook';

    const UseFetch = () => {
        const {data: posts, isLoading, error} = useFetch('https://jsonplaceholder.typicode.com/posts');

        // show a loading message while data is fetching
        if(isLoading){
            return <h2>Loading...</h2>
        }

        //handle error
        if(error){
            return <div className='error'>Error: error fetching</div>
        }

        return (
            <div>
                <h1 className='title'>Post of users</h1>
                {posts.map((post) => (
                    <div key={post.id} className='card'>
                        <h2 className='users'>{post.title}</h2>
                        <p>{post.body}</p>
                        </div>
                ))}
            </div>
        )
    }

    export default UseFetch;